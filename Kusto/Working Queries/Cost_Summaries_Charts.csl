// Finds total ingestion cost by ResourceID and breaks down last x days of ingestion
let DaysAgo = ago(7d);
let BaseSearch = (search *
| where TimeGenerated > DaysAgo
and _IsBillable == true);
let TotalCost = (BaseSearch
| summarize TotalGB = round(sum(_BilledSize / 1024 / 1024 / 1024), 3) by _ResourceId
| sort by TotalGB
| project TotalGB, _ResourceId);
//=======
let GB_Bag = (BaseSearch
| extend Bin = bin(TimeGenerated, 1d)
| extend Bin = tostring(format_datetime(Bin, 'M/d/yyyy'))
| summarize GBDays = round(sum(_BilledSize / 1024 / 1024 / 1024), 3) by _ResourceId, Bin
| extend GB_Bag = bag_pack(Bin, strcat(GBDays, " GB"))
| summarize GB_Bag = make_bag(GB_Bag) by _ResourceId);
//=======
let Cost_Bag = (BaseSearch
| extend Bin = bin(TimeGenerated, 1d)
| extend Bin = tostring(format_datetime(Bin, 'M/d/yyyy'))
| summarize GBDays = round(sum(_BilledSize / 1024 / 1024 / 1024), 3) by _ResourceId, Bin
| extend Cost_Bag = bag_pack(Bin, strcat("$", round(GBDays*2.3, 2)))
| summarize Cost_Bag = make_bag(Cost_Bag) by _ResourceId);
//=======
BaseSearch
| distinct _ResourceId
| join Cost_Bag on _ResourceId
| join GB_Bag on _ResourceId
| join TotalCost on _ResourceId
| sort by TotalGB
| extend TotalCost = strcat("$", round((TotalGB * 2.3), 2))
| project-away _ResourceId1, _ResourceId2, _ResourceId3
| parse tolower(_ResourceId) with "/subscriptions/" SubscriptionId "/resourcegroups/" ResourceGroup "/providers/" Provider "/" ResourceType "/" ResourceName
| project-reorder ResourceName, TotalCost, TotalGB, Cost_Bag, GB_Bag, ResourceType, Provider, ResourceGroup

// Find total cost of GB per Resource in workspace
search *
| where TimeGenerated > ago(30d)
and _IsBillable == true
| summarize GB = round(sum(_BilledSize / 1024 / 1024 / 1024), 3) by _ResourceId
| order by GB
| extend Cost = strcat("$", round((GB * 2.3), 2)), GB = strcat(GB, " GB")
| parse tolower(_ResourceId) with "/subscriptions/" SubscriptionId "/resourcegroups/" ResourceGroup "/providers/" Provider "/" ResourceType "/" ResourceName
| project-reorder ResourceName, ResourceType, Provider, GB, Cost

// Find total cost of GB per DataType and Solution
Usage
| where TimeGenerated >ago(30d)
| summarize GB = round(sum(Quantity / 1024), 3) by DataType, Solution
| order by GB
| extend Cost = strcat("$", round((GB * 2.3), 2)), GB = strcat(GB, " GB")

// Find billable usage for the workspace by solution
Usage
| where TimeGenerated >ago(30d)
| summarize GB = sum(Quantity / 1024) by Solution
| order by GB

// Find Billable GB rounded
Usage
| where TimeGenerated > ago(30d)
and TimeGenerated < ago(15m)
| where IsBillable == "True"
| summarize BillableGB = round(sum(Quantity) / 1024, 3) by DataType, Solution

// Make timechart of DollarCost of Ingestion over last 30 days by DataType
Usage
| where TimeGenerated > ago(30d)
and IsBillable == "True"
| extend Converted_TimeGenerated_EST = datetime_utc_to_local(TimeGenerated, "US/Eastern")
| make-series DollarCost = round(sum((Quantity/1024)*2.3), 4) default = 0 on Converted_TimeGenerated_EST from ago(30d) to now() step 1h by DataType
| render timechart with (title = "Cost trends over 30 days", ytitle = "DollarCost")

// Make timechart of Billable Ingested MBytes over last 30 days by DataType
Usage
| where TimeGenerated > ago(30d)
and IsBillable == "True"
| extend Converted_TimeGenerated_EST = datetime_utc_to_local(TimeGenerated, "US/Eastern")
| make-series MBytes = round(sum(Quantity), 4) default = 0 on Converted_TimeGenerated_EST from ago(30d) to now() step 1h by DataType
| render timechart with (title = "Billable usage trends over 30 days", ytitle = "MBytes")

// Make timechart of billable ingestions for a table over last 30 days by Computer (fill in tablename Syslog, Event, etc)
<tablename>
| where TimeGenerated > ago(30d)
| extend Converted_TimeGenerated_EST = datetime_utc_to_local(TimeGenerated, "US/Eastern")
| make-series MBytes = round(sum(_BilledSize) / 1024, 4) default = 0 on Converted_TimeGenerated_EST from ago(30d) to now() step 1h by Computer
| render timechart with (title = "Billable usage trends over 30 days", ytitle = "MBytes")

// Finds total ingestion cost by ResourceID and/or $table
let DaysAgo = ago(30d);
search *
    | where TimeGenerated > DaysAgo
        and _IsBillable == true
    | summarize TotalGB = round(sum(_BilledSize / 1024 / 1024 / 1024), 3) by _ResourceId, $table
    | sort by TotalGB
    | extend TotalCost = strcat("$", round((TotalGB * 2.3), 2))
    | parse tolower(_ResourceId) with "/subscriptions/" SubscriptionId "/resourcegroups/" ResourceGroup "/providers/" Provider "/" ResourceType "/" ResourceName
    | project-reorder 
        ResourceName, 
        $table, 
        TotalCost, 
        TotalGB, 
        ResourceType, 
        Provider, 
        ResourceGroup